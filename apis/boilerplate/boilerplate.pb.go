// Code generated by protoc-gen-go.
// source: boilerplate/boilerplate.proto
// DO NOT EDIT!

/*
Package boilerplate is a generated protocol buffer package.

It is generated from these files:
	boilerplate/boilerplate.proto

It has these top-level messages:
	BoilerplateRequest
	BoilerplateResponse
*/
package boilerplate

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BoilerplateRequest struct {
}

func (m *BoilerplateRequest) Reset()                    { *m = BoilerplateRequest{} }
func (m *BoilerplateRequest) String() string            { return proto.CompactTextString(m) }
func (*BoilerplateRequest) ProtoMessage()               {}
func (*BoilerplateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type BoilerplateResponse struct {
}

func (m *BoilerplateResponse) Reset()                    { *m = BoilerplateResponse{} }
func (m *BoilerplateResponse) String() string            { return proto.CompactTextString(m) }
func (*BoilerplateResponse) ProtoMessage()               {}
func (*BoilerplateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*BoilerplateRequest)(nil), "boilerplate.BoilerplateRequest")
	proto.RegisterType((*BoilerplateResponse)(nil), "boilerplate.BoilerplateResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Boilerplate service

type BoilerplateClient interface {
	Method(ctx context.Context, in *BoilerplateRequest, opts ...grpc.CallOption) (*BoilerplateResponse, error)
	StreamingMethod(ctx context.Context, in *BoilerplateRequest, opts ...grpc.CallOption) (Boilerplate_StreamingMethodClient, error)
}

type boilerplateClient struct {
	cc *grpc.ClientConn
}

func NewBoilerplateClient(cc *grpc.ClientConn) BoilerplateClient {
	return &boilerplateClient{cc}
}

func (c *boilerplateClient) Method(ctx context.Context, in *BoilerplateRequest, opts ...grpc.CallOption) (*BoilerplateResponse, error) {
	out := new(BoilerplateResponse)
	err := grpc.Invoke(ctx, "/boilerplate.Boilerplate/Method", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boilerplateClient) StreamingMethod(ctx context.Context, in *BoilerplateRequest, opts ...grpc.CallOption) (Boilerplate_StreamingMethodClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Boilerplate_serviceDesc.Streams[0], c.cc, "/boilerplate.Boilerplate/StreamingMethod", opts...)
	if err != nil {
		return nil, err
	}
	x := &boilerplateStreamingMethodClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Boilerplate_StreamingMethodClient interface {
	Recv() (*BoilerplateResponse, error)
	grpc.ClientStream
}

type boilerplateStreamingMethodClient struct {
	grpc.ClientStream
}

func (x *boilerplateStreamingMethodClient) Recv() (*BoilerplateResponse, error) {
	m := new(BoilerplateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Boilerplate service

type BoilerplateServer interface {
	Method(context.Context, *BoilerplateRequest) (*BoilerplateResponse, error)
	StreamingMethod(*BoilerplateRequest, Boilerplate_StreamingMethodServer) error
}

func RegisterBoilerplateServer(s *grpc.Server, srv BoilerplateServer) {
	s.RegisterService(&_Boilerplate_serviceDesc, srv)
}

func _Boilerplate_Method_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoilerplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoilerplateServer).Method(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/boilerplate.Boilerplate/Method",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoilerplateServer).Method(ctx, req.(*BoilerplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Boilerplate_StreamingMethod_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BoilerplateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BoilerplateServer).StreamingMethod(m, &boilerplateStreamingMethodServer{stream})
}

type Boilerplate_StreamingMethodServer interface {
	Send(*BoilerplateResponse) error
	grpc.ServerStream
}

type boilerplateStreamingMethodServer struct {
	grpc.ServerStream
}

func (x *boilerplateStreamingMethodServer) Send(m *BoilerplateResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Boilerplate_serviceDesc = grpc.ServiceDesc{
	ServiceName: "boilerplate.Boilerplate",
	HandlerType: (*BoilerplateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Method",
			Handler:    _Boilerplate_Method_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamingMethod",
			Handler:       _Boilerplate_StreamingMethod_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "boilerplate/boilerplate.proto",
}

func init() { proto.RegisterFile("boilerplate/boilerplate.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 130 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x92, 0x4d, 0xca, 0xcf, 0xcc,
	0x49, 0x2d, 0x2a, 0xc8, 0x49, 0x2c, 0x49, 0xd5, 0x47, 0x62, 0xeb, 0x15, 0x14, 0xe5, 0x97, 0xe4,
	0x0b, 0x71, 0x23, 0x09, 0x29, 0x89, 0x70, 0x09, 0x39, 0x21, 0xb8, 0x41, 0xa9, 0x85, 0xa5, 0xa9,
	0xc5, 0x25, 0x4a, 0xa2, 0x5c, 0xc2, 0x28, 0xa2, 0xc5, 0x05, 0xf9, 0x79, 0xc5, 0xa9, 0x46, 0x9b,
	0x18, 0xb9, 0xb8, 0x91, 0xc4, 0x85, 0xbc, 0xb9, 0xd8, 0x7c, 0x53, 0x4b, 0x32, 0xf2, 0x53, 0x84,
	0xe4, 0xf5, 0x90, 0xed, 0xc1, 0x34, 0x51, 0x4a, 0x01, 0xb7, 0x02, 0x88, 0xe1, 0x42, 0x61, 0x5c,
	0xfc, 0xc1, 0x25, 0x45, 0xa9, 0x89, 0xb9, 0x99, 0x79, 0xe9, 0x54, 0x33, 0xd5, 0x80, 0x31, 0x89,
	0x0d, 0xec, 0x6b, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x32, 0xda, 0xef, 0x42, 0x16, 0x01,
	0x00, 0x00,
}
