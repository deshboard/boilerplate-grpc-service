// Code generated by protoc-gen-go.
// source: boilerplate2/boilerplate2.proto
// DO NOT EDIT!

/*
Package boilerplate2 is a generated protocol buffer package.

It is generated from these files:
	boilerplate2/boilerplate2.proto

It has these top-level messages:
	BoilerplateRequest2
	BoilerplateResponse2
*/
package boilerplate2

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BoilerplateRequest2 struct {
}

func (m *BoilerplateRequest2) Reset()                    { *m = BoilerplateRequest2{} }
func (m *BoilerplateRequest2) String() string            { return proto.CompactTextString(m) }
func (*BoilerplateRequest2) ProtoMessage()               {}
func (*BoilerplateRequest2) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type BoilerplateResponse2 struct {
}

func (m *BoilerplateResponse2) Reset()                    { *m = BoilerplateResponse2{} }
func (m *BoilerplateResponse2) String() string            { return proto.CompactTextString(m) }
func (*BoilerplateResponse2) ProtoMessage()               {}
func (*BoilerplateResponse2) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*BoilerplateRequest2)(nil), "boilerplate2.BoilerplateRequest2")
	proto.RegisterType((*BoilerplateResponse2)(nil), "boilerplate2.BoilerplateResponse2")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Boilerplate2 service

type Boilerplate2Client interface {
	Method(ctx context.Context, in *BoilerplateRequest2, opts ...grpc.CallOption) (*BoilerplateResponse2, error)
	StreamingMethod(ctx context.Context, in *BoilerplateRequest2, opts ...grpc.CallOption) (Boilerplate2_StreamingMethodClient, error)
}

type boilerplate2Client struct {
	cc *grpc.ClientConn
}

func NewBoilerplate2Client(cc *grpc.ClientConn) Boilerplate2Client {
	return &boilerplate2Client{cc}
}

func (c *boilerplate2Client) Method(ctx context.Context, in *BoilerplateRequest2, opts ...grpc.CallOption) (*BoilerplateResponse2, error) {
	out := new(BoilerplateResponse2)
	err := grpc.Invoke(ctx, "/boilerplate2.Boilerplate2/Method", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boilerplate2Client) StreamingMethod(ctx context.Context, in *BoilerplateRequest2, opts ...grpc.CallOption) (Boilerplate2_StreamingMethodClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Boilerplate2_serviceDesc.Streams[0], c.cc, "/boilerplate2.Boilerplate2/StreamingMethod", opts...)
	if err != nil {
		return nil, err
	}
	x := &boilerplate2StreamingMethodClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Boilerplate2_StreamingMethodClient interface {
	Recv() (*BoilerplateResponse2, error)
	grpc.ClientStream
}

type boilerplate2StreamingMethodClient struct {
	grpc.ClientStream
}

func (x *boilerplate2StreamingMethodClient) Recv() (*BoilerplateResponse2, error) {
	m := new(BoilerplateResponse2)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Boilerplate2 service

type Boilerplate2Server interface {
	Method(context.Context, *BoilerplateRequest2) (*BoilerplateResponse2, error)
	StreamingMethod(*BoilerplateRequest2, Boilerplate2_StreamingMethodServer) error
}

func RegisterBoilerplate2Server(s *grpc.Server, srv Boilerplate2Server) {
	s.RegisterService(&_Boilerplate2_serviceDesc, srv)
}

func _Boilerplate2_Method_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoilerplateRequest2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Boilerplate2Server).Method(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/boilerplate2.Boilerplate2/Method",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Boilerplate2Server).Method(ctx, req.(*BoilerplateRequest2))
	}
	return interceptor(ctx, in, info, handler)
}

func _Boilerplate2_StreamingMethod_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BoilerplateRequest2)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(Boilerplate2Server).StreamingMethod(m, &boilerplate2StreamingMethodServer{stream})
}

type Boilerplate2_StreamingMethodServer interface {
	Send(*BoilerplateResponse2) error
	grpc.ServerStream
}

type boilerplate2StreamingMethodServer struct {
	grpc.ServerStream
}

func (x *boilerplate2StreamingMethodServer) Send(m *BoilerplateResponse2) error {
	return x.ServerStream.SendMsg(m)
}

var _Boilerplate2_serviceDesc = grpc.ServiceDesc{
	ServiceName: "boilerplate2.Boilerplate2",
	HandlerType: (*Boilerplate2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Method",
			Handler:    _Boilerplate2_Method_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamingMethod",
			Handler:       _Boilerplate2_StreamingMethod_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "boilerplate2/boilerplate2.proto",
}

func init() { proto.RegisterFile("boilerplate2/boilerplate2.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 134 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x92, 0x4f, 0xca, 0xcf, 0xcc,
	0x49, 0x2d, 0x2a, 0xc8, 0x49, 0x2c, 0x49, 0x35, 0xd2, 0x47, 0xe6, 0xe8, 0x15, 0x14, 0xe5, 0x97,
	0xe4, 0x0b, 0xf1, 0x20, 0x8b, 0x29, 0x89, 0x72, 0x09, 0x3b, 0x21, 0xf8, 0x41, 0xa9, 0x85, 0xa5,
	0xa9, 0xc5, 0x25, 0x46, 0x4a, 0x62, 0x5c, 0x22, 0x28, 0xc2, 0xc5, 0x05, 0xf9, 0x79, 0xc5, 0xa9,
	0x46, 0x46, 0xbb, 0x19, 0xb9, 0x78, 0x90, 0x24, 0x8c, 0x84, 0xfc, 0xb9, 0xd8, 0x7c, 0x53, 0x4b,
	0x32, 0xf2, 0x53, 0x84, 0x14, 0xf5, 0x50, 0x2c, 0xc3, 0x62, 0xaa, 0x94, 0x12, 0x1e, 0x25, 0x50,
	0x1b, 0x84, 0xa2, 0xb8, 0xf8, 0x83, 0x4b, 0x8a, 0x52, 0x13, 0x73, 0x33, 0xf3, 0xd2, 0xa9, 0x6a,
	0xb2, 0x01, 0x63, 0x12, 0x1b, 0x38, 0x04, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x3b, 0x06,
	0x71, 0x13, 0x24, 0x01, 0x00, 0x00,
}
